----------------------------------------------------------------------------------------------
INTRODUÇÃO:
----------------------------------------------------------------------------------------------

O sistema foi feito para empresas que trabalham com a venda de produtos como supermercados, por exemplo. Está mais focado no gerenciamento de produtos e no caixa, mas clientes podem ver a lista de produtos e seus respectivos preços.

----------------------------------------------------------------------------------------------
IMPLEMENTAÇÃO:
----------------------------------------------------------------------------------------------

-Armazenamento de informações:
    Decidi fazer o armazenamento dos dados em arquivos .csv, para que funcione em conjunto com planilhas, em forma de tabela. Logo ao iniciar o programa, esses arquivos, caso não existirem, serão criados por meio da função create_files() na pasta em que o código está, com os headers já são escritos. Os arquviso são:

    *users.csv:
    é nesse arquivos em que os dados dos usuários serão armazenados, sendo eles id: para facilitar sua identificação, user: nome do usuário, password: senha do usuário e permission: nível de permissão, quanto maior, mais coisas podem ser feitas(0=cliente, 3=dono). Ao iniciar o programa pela primeira vez, se você não tiver o arquivo, ele será gerado automaticamente com os headers e um usuário pronto "owner" com senha "00000", a partir dele, todos os outros podem ser criados, e somente pessoas com o mesmo nível podem alterá-lo.

    *products.csv:
    é nesse arquivo em que os dados dos produtos serão armazenados, sendo eles id: para facilitar sua identificação, name: o nome do produto, price: preço unitário e amount: quantidade atual do produto. Também será gerado automaticamente, mas apenas com os headers, precisando de pessoas de cargo 2(gerente) ou 3(dono) para adicionar produtos.

    Para usar as informações no programa, estou as armazenando em dicionários dentro de listas, que nomeei de "products" e "users" onde cada chave é um header de seus respectivos .csv, fiz uma nova lista ser gerada sempre que eu for fazer alguma alteração nos arquivos, para ter certeza que os dados estarão sempre atualizados, é aqui que entra o "read" do CRUD.

-Logs:
    Coloquei um arquivo "logs.txt" para mostrar o que o usuário fez enquanto o programa estava rodando, podendo ver melhor como é a movimentação do código.

-Partes do programa:

    *Login:
    Ao entrar, o usuário irá para a sessão de login. O programa irá ler(read) o arquivo "users" e armazenar em uma lista de dicionários, onde as chaves serão cada header. Se escrever corretamente um usuário e senha que estão em um mesmo índice, o login é bem-sucedido, o levando para a função principal, junto com as informações: id, user e permission.

    *Menus:
    A navegação é feito com a escolha de uma opção, numérica para múltipla escolha ou booleana. A ideia é ser uma navegação rápida então muitas opções tratam qualquer coisa que não for "n" como sim, preferi fazer assim para agilizar, assim você pode só apertar enter para confirmar, só não fiz assim na de deletar, por motivos de segurança.

    *Main:
    Aqui, para clientes, só haverão opções de voltar, trocar de usuário e ver a lista de produtos ou cateorias. O resto só aparecerá para pessoas com nível de permissão suficiente, sendo elas: gerenciar(2+) e caixa(1+).

    *Lists(product_list_menu())
    Onde os clientes podem ver as categorias existentes e ver a lista de produtos, ordenada por preço ou nome. Foi nessa parte que coloquei a estrutura ser(), para não ter repetição de categoria.

    *Management(gerenciar):
    Aqui é onde a maior parte do CRUD foi colocado, você pode escolher entre gerenciar produtos ou usuários e, para as duas opções, escolhe entre adicionar(create), atualizar(update) ou deletar(Delete). Especificamente na parte de usuários, você é proibido de fazer qualquer uma dessas coisas com cargos maiores que o seu, ou seja, um gerente não pode criar, mudar ou deletar uma conta de um dono.

    *Cashier(caixa):
    É onde as vendas serão feitas. Ao iniciar uma venda, uma lista vazia é criada, sendo preenchida com os produtos que forem sendo registrados por meio de seus IDs. Cada produto só pode ser adicionado uma vez e, por segurança, não pode ser uma quantidade maior do que há no estoque. Se você escrever um id que já está na lista, você tem a opção de removê-lo ou trocar a quantidade colocada. Ao finalizar a venda, o arquivo de produtos será atualizado(update) com as novas quantidades.

----------------------------------------------------------------------------------------------
CONCLUSÃO:
----------------------------------------------------------------------------------------------

No geral consegui fazer tudo que eu queria, e adicionei até mais funções. Achei divertido fazer uma base de dados com arquivos .csv

A única coisa que está me incomodando é o grande número de repetições. Eliminei a maioria fazendo funções, mas ainda tem muitas que ainda não consegui pensar em uma forma de mudar sem comprometer o funcionamento das coisas. Um exemplo são as funções de adicionar, atualizar e deletar produtos e usuários, que estão em funções diferentes, mas como eu preciso fazer verificações a mais quando vou lidar com usuários, e como preciso de mais variáveis para produtos, precisei deixar mais separado. Talvez eu encontre alguma forma melhor de lidar com isso no futuro, mas essa foi a solução que encontrei no momento.